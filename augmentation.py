import os
import cv2
import sys
import glob
import random
import numpy as np
import albumentations
from PIL import Image

original_lung_masks_paths = glob.glob('lungs/*.png')

gan = sys.argv[1]
print(gan)

pt = 'augmented_images/' + gan + '/'
if os.path.isdir(pt):
    os.system('rm -rf {}'.format(pt))
os.mkdir(pt)

pt = 'augmented_images/' + gan + '/images/'
os.mkdir(pt)

pt = 'augmented_images/' + gan + '/masks/'
os.mkdir(pt)

pt = 'augmented_images/' + gan + '/masked/'
os.mkdir(pt)

# Read the images generated by the GAN
gan_images_paths = glob.glob(gan + '/images/*.jpg')

# For each image generated by the GAN
for gan_image_path in gan_images_paths:

    # Find the bounding box of the lung regions
    #====================================================================================================
    gan_image = cv2.imread(gan_image_path)
    print(gan_image_path)
    gan_mask_path = gan_image_path.replace('images/', 'predicted_masks/').replace('.jpg','.png')
    gan_mask = cv2.imread(gan_mask_path)
    #print(gan_image_path)
    height, width, _ = gan_mask.shape
    
    gan_mask = cv2.cvtColor(gan_mask, cv2.COLOR_BGR2GRAY)
    contours, hiers = cv2.findContours(gan_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    gan_image_values = {
        'image_path' : gan_image_path,
        'mask_path' : gan_mask_path,
        'image' : gan_image,
        'mask' : gan_mask,
        'num_lungs' : 0,
        'height' : height,
        'width' : width,
    }
        
    areas = []
    bboxes = []
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)    

        lung = gan_mask[y:y+h, x:x+w]
        lung = np.where(lung != 0, 1, 0)
        area = np.sum(lung == 1)

        if area > 10000:
            areas.append(area)
            bboxes.append((x, y, w, h))
    
    if len(areas) == 2:
        gan_image_values['num_lungs'] = 2
        if bboxes[0][0] > bboxes[0][1]:
            gan_image_values['bbox_left'] = bboxes[1]
            gan_image_values['lung_areas_left'] = areas[1]
            gan_image_values['bbox_right'] = bboxes[0]
            gan_image_values['lung_areas_right'] = areas[0]
        else:
            gan_image_values['bbox_left'] = bboxes[0]
            gan_image_values['lung_areas_left'] = areas[0]
            gan_image_values['bbox_right'] = bboxes[1]
            gan_image_values['lung_areas_right'] = areas[1]
        gan_image_values['bbox_left_center'] = (gan_image_values['bbox_left'][0] + int(gan_image_values['bbox_left'][2]/2),
                                                gan_image_values['bbox_left'][1] + int(gan_image_values['bbox_left'][3]/2))
        gan_image_values['bbox_right_center'] = (gan_image_values['bbox_right'][0] + int(gan_image_values['bbox_right'][2]/2),
                                                 gan_image_values['bbox_right'][1] + int(gan_image_values['bbox_right'][3]/2))
    #====================================================================================================

    # If the image generated by the GAN has two lung regions with an area of at least 10000 pixels, then
    # try to find a real image where the size of the lungs are close to the size of the lungs of the image
    # generated by the GAN
    #====================================================================================================
    if gan_image_values['num_lungs'] == 2:

        min_width_left = 0.9 * gan_image_values['bbox_left'][2]
        max_width_left = gan_image_values['bbox_left'][2] + 0.1 * gan_image_values['bbox_left'][2]

        min_width_right = 0.9 * gan_image_values['bbox_right'][2]
        max_width_right = gan_image_values['bbox_right'][2] + 0.1 * gan_image_values['bbox_right'][2]

        min_height_left = 0.9 * gan_image_values['bbox_left'][3]
        max_height_left = gan_image_values['bbox_left'][3] + 0.1 * gan_image_values['bbox_left'][3]

        min_height_right = 0.9 * gan_image_values['bbox_right'][3]
        max_height_right = gan_image_values['bbox_right'][3] + 0.1 * gan_image_values['bbox_right'][3]

        search_infection = True
        cont_search = 0
        while(search_infection):

            if cont_search == 10000:
                break
            cont_search += 1

            #print(len(original_lung_masks_paths))
            random_original_id = random.randint(0, len(original_lung_masks_paths)-1)
            original_lung_mask_path = original_lung_masks_paths[random_original_id]
            #print(original_lung_mask_path)
            original_lung_mask = cv2.imread(original_lung_mask_path)

            transform = albumentations.HorizontalFlip(always_apply=True)
            original_lung_mask = transform(image=original_lung_mask)['image']

            height, width, _ = original_lung_mask.shape

            if height != gan_image_values['height'] or width != gan_image_values['width']:
                continue

            original_lung_mask = cv2.cvtColor(original_lung_mask, cv2.COLOR_BGR2GRAY)
            contours, hiers = cv2.findContours(original_lung_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            
            original_image_values = {
                'lung_mask_path' : original_lung_mask_path,
                'lung_mask' : original_lung_mask,
                'num_lungs' : 0,
                'height' : height,
                'width' : width,
            }

            areas = []
            bboxes = []
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)    

                lung = gan_mask[y:y+h, x:x+w]
                lung = np.where(lung != 0, 1, 0)
                area = np.sum(lung == 1)

                if area > 10000:
                    areas.append(area)
                    bboxes.append((x, y, w, h))

            if len(areas) == 2:
                original_image_values['num_lungs'] = 2
                if bboxes[0][0] > bboxes[0][1]:
                    original_image_values['bbox_left'] = bboxes[1]
                    original_image_values['lung_areas_left'] = areas[1]
                    original_image_values['bbox_right'] = bboxes[0]
                    original_image_values['lung_areas_right'] = areas[0]
                else:
                    original_image_values['bbox_left'] = bboxes[0]
                    original_image_values['lung_areas_left'] = areas[0]
                    original_image_values['bbox_right'] = bboxes[1]
                    original_image_values['lung_areas_right'] = areas[1]
                original_image_values['bbox_left_center'] = (original_image_values['bbox_left'][0] + int(original_image_values['bbox_left'][2]/2),
                                                             original_image_values['bbox_left'][1] + int(original_image_values['bbox_left'][3]/2))
                original_image_values['bbox_right_center'] = (original_image_values['bbox_right'][0] + int(original_image_values['bbox_right'][2]/2),
                                                              original_image_values['bbox_right'][1] + int(original_image_values['bbox_right'][3]/2))

            if original_image_values['num_lungs'] == 2:
                #====================================================================================================

                # Here, the image was found and stop searching
                if original_image_values['bbox_left'][2] >= min_width_left and original_image_values['bbox_left'][2] <= max_width_left and \
                   original_image_values['bbox_right'][2] >= min_width_right and original_image_values['bbox_right'][2] <= max_width_right:
                    if original_image_values['bbox_left'][3] >= min_height_left and original_image_values['bbox_left'][3] <= max_height_left and \
                       original_image_values['bbox_right'][3] >= min_height_right and original_image_values['bbox_right'][3] <= max_height_right:
                        search_infection = False

                        # Remove from list
                        original_lung_masks_paths.pop(random_original_id)
                        
                        # Save the images information
                        original_image_values['mask_path'] = original_image_values['lung_mask_path'].replace('lungs/','masks/')
                        original_image_values['image_path'] = original_image_values['lung_mask_path'].replace('lungs/','images/').replace('.png','.jpg')
                        original_image_values['image'] = cv2.imread(original_image_values['image_path'])
                        original_image_values['mask'] = cv2.imread(original_image_values['mask_path'],0)
                        print(original_image_values['image_path'])
                        original_image_values['image'] = transform(image=original_image_values['image'])['image']
                        original_image_values['mask'] = transform(image=original_image_values['mask'])['image']
                        
                        # Split the image and masks into right and left bounding boxes
                        right_lung = np.zeros((original_image_values['height'],width), np.uint8)
                        left_lung = np.zeros((original_image_values['height'],width), np.uint8)

                        # Here for the lung mask
                        #====================================================================================================
                        right_lung[original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                   original_image_values['bbox_right'][3],
                                   original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                   original_image_values['bbox_right'][2]] = original_image_values['lung_mask'][original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                                                                                                original_image_values['bbox_right'][3],
                                                                                                                original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                                                                                                original_image_values['bbox_right'][2]]

                        left_lung[original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                  original_image_values['bbox_left'][3],
                                  original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                  original_image_values['bbox_left'][2]] = original_image_values['lung_mask'][original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                                                                                              original_image_values['bbox_left'][3],
                                                                                                              original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                                                                                              original_image_values['bbox_left'][2]]
                        right_mask = np.zeros((original_image_values['height'],original_image_values['width']), np.uint8)
                        left_mask = np.zeros((original_image_values['height'],original_image_values['width']), np.uint8)
                        
                        # Here for the infection mask
                        #====================================================================================================
                        right_mask[original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                   original_image_values['bbox_right'][3],
                                   original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                   original_image_values['bbox_right'][2]] = original_image_values['mask'][original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                                                                                           original_image_values['bbox_right'][3],
                                                                                                           original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                                                                                           original_image_values['bbox_right'][2]]

                        left_mask[original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                  original_image_values['bbox_left'][3],
                                  original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                  original_image_values['bbox_left'][2]] = original_image_values['mask'][original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                                                                                         original_image_values['bbox_left'][3],
                                                                                                         original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                                                                                         original_image_values['bbox_left'][2]]
                        right_image = np.zeros((original_image_values['height'],original_image_values['width'],3), np.uint8)
                        left_image = np.zeros((original_image_values['height'],original_image_values['width'],3), np.uint8)

                        # Here for the image
                        #====================================================================================================
                        right_image[original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                    original_image_values['bbox_right'][3],
                                    original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                    original_image_values['bbox_right'][2]] = original_image_values['image'][original_image_values['bbox_right'][1]:original_image_values['bbox_right'][1]+
                                                                                                             original_image_values['bbox_right'][3],
                                                                                                             original_image_values['bbox_right'][0]:original_image_values['bbox_right'][0]+
                                                                                                             original_image_values['bbox_right'][2]]

                        left_image[original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                   original_image_values['bbox_left'][3],
                                   original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                   original_image_values['bbox_left'][2]] = original_image_values['image'][original_image_values['bbox_left'][1]:original_image_values['bbox_left'][1]+
                                                                                                           original_image_values['bbox_left'][3],
                                                                                                           original_image_values['bbox_left'][0]:original_image_values['bbox_left'][0]+
                                                                                                           original_image_values['bbox_left'][2]]                       
                        # Save the new images in the dictionary
                        original_image_values['right_image'] = right_image
                        original_image_values['left_image'] = left_image

                        original_image_values['right_mask'] = right_mask
                        original_image_values['left_mask'] = left_mask

                        original_image_values['right_lung'] = right_lung
                        original_image_values['left_lung'] = left_lung

                        # Apply affine transformation to shift the lung region of original image to the gan image
                        #====================================================================================================
                        shift_x_left = gan_image_values['bbox_left_center'][0] - original_image_values['bbox_left_center'][0]
                        shift_y_left = gan_image_values['bbox_left_center'][1] - original_image_values['bbox_left_center'][1]
                        translation_matrix_left = np.float32([[1,0,shift_x_left], [0,1,shift_y_left]])

                        shift_x_right = gan_image_values['bbox_right_center'][0] - original_image_values['bbox_right_center'][0]
                        shift_y_right = gan_image_values['bbox_right_center'][1] - original_image_values['bbox_right_center'][1]
                        translation_matrix_right = np.float32([[1,0,shift_x_right], [0,1,shift_y_right]])

                        original_image_values['bbox_right'] = (original_image_values['bbox_right'][0]+shift_x_right,
                                                               original_image_values['bbox_right'][1]+shift_y_right,
                                                               original_image_values['bbox_right'][2],
                                                               original_image_values['bbox_right'][3])

                        original_image_values['bbox_left'] = (original_image_values['bbox_left'][0]+shift_x_left,
                                                              original_image_values['bbox_left'][1]+shift_y_left,
                                                              original_image_values['bbox_left'][2],
                                                              original_image_values['bbox_left'][3])

                        original_image_values['bbox_left_center'] = gan_image_values['bbox_left_center']
                        original_image_values['bbox_right_center'] = gan_image_values['bbox_right_center']
                                               
                        original_image_values['right_lung'] = cv2.warpAffine(original_image_values['right_lung'], 
                                                              translation_matrix_right, (original_image_values['height'],original_image_values['width']))
                        original_image_values['left_lung'] = cv2.warpAffine(original_image_values['left_lung'], 
                                                              translation_matrix_left, (original_image_values['height'],original_image_values['width']))

                        original_image_values['right_mask'] = cv2.warpAffine(original_image_values['right_mask'], 
                                                              translation_matrix_right, (original_image_values['height'],original_image_values['width']))
                        original_image_values['left_mask'] = cv2.warpAffine(original_image_values['left_mask'], 
                                                              translation_matrix_left, (original_image_values['height'],original_image_values['width']))

                        original_image_values['right_image'] = cv2.warpAffine(original_image_values['right_image'], 
                                                              translation_matrix_right, (original_image_values['height'],original_image_values['width']))
                        original_image_values['left_image'] = cv2.warpAffine(original_image_values['left_image'], 
                                                              translation_matrix_left, (original_image_values['height'],original_image_values['width']))
                        #====================================================================================================

                        # Convert all masks to 255 format
                        original_image_values['left_lung'] = np.where(original_image_values['left_lung'] != 0, 255, 0)
                        original_image_values['right_lung'] = np.where(original_image_values['right_lung'] != 0, 255, 0)
                        
                        original_image_values['left_mask'] = np.where(original_image_values['left_mask'] != 0, 255, 0)
                        original_image_values['right_mask'] = np.where(original_image_values['right_mask'] != 0, 255, 0)
                        
                        gan_image_values['mask'] = np.where(gan_image_values['mask'] != 0, 255, 0)

                        #blur_filter = (15, 15)
                        #original_image_values['left_mask'] = cv2.blur(original_image_values['left_mask'], blur_filter)
                        #original_image_values['right_mask'] = cv2.blur(original_image_values['right_mask'], blur_filter)
                        
                        new_right_mask = np.where(((original_image_values['right_mask'] == 255) & (gan_image_values['mask'] == 255)), 255, 0)
                        original_image_values['right_mask'] = new_right_mask.astype(np.uint8)
                        
                        new_left_mask = np.where(((original_image_values['left_mask'] == 255) & (gan_image_values['mask'] == 255)), 255, 0)
                        original_image_values['left_mask'] = new_left_mask.astype(np.uint8)
                        
                        left_image = np.zeros((original_image_values['height'], original_image_values['width'], 3), np.uint8)
                        left_image[np.where(new_left_mask == 255)] = original_image_values['left_image'][np.where(new_left_mask == 255)]
                        
                        right_image = np.zeros((original_image_values['height'], original_image_values['width'], 3), np.uint8)
                        right_image[np.where(new_right_mask == 255)] = original_image_values['right_image'][np.where(new_right_mask == 255)]

                        original_image_values['left_image'] = left_image
                        original_image_values['right_image'] = right_image

                        #blur_filter = (7, 7)
                        #original_image_values['left_image'] = cv2.blur(original_image_values['left_image'], blur_filter)
                        #original_image_values['right_image'] = cv2.blur(original_image_values['right_image'], blur_filter)
                        
                        #cv2.imwrite('gan.jpg', gan_image_values['image'])
                        left_image = np.zeros((gan_image_values['height'], gan_image_values['width'], 3), np.uint8)
                        left_image[np.where(original_image_values['left_mask'] == 255)] = gan_image_values['image'][np.where(original_image_values['left_mask'] == 255)]
                        
                        right_image = np.zeros((gan_image_values['height'], gan_image_values['width'], 3), np.uint8)
                        right_image[np.where(original_image_values['right_mask'] == 255)] = gan_image_values['image'][np.where(original_image_values['right_mask'] == 255)]

                        #blur_filter = (7, 7)
                        #left_image = cv2.blur(left_image, blur_filter)
                        #right_image = cv2.blur(right_image, blur_filter)
                        
                        #right_image_path = 'augmented_images/right_image.jpg'
                        #cv2.imwrite(right_image_path, right_image)

                        #left_image_path = 'augmented_images/left_image.jpg'
                        #cv2.imwrite(left_image_path, left_image)

                        gan_image_values['image'][np.where(original_image_values['left_mask'] == 255)] = 0
                        gan_image_values['image'][np.where(original_image_values['right_mask'] == 255)] = 0

                        infected_image_left = cv2.addWeighted(original_image_values['left_image'], 1, 
                                                              left_image, 0.4, 0)
                        infected_image_right = cv2.addWeighted(original_image_values['right_image'], 1, 
                                                               right_image, 0.4, 0)

                        infected_image = cv2.addWeighted(gan_image_values['image'], 1, 
                                                         infected_image_left, 1, 0)
                        infected_image = cv2.addWeighted(infected_image, 1, 
                                                         infected_image_right, 1, 0)

                        blur_filter = (3, 3)
                        infected_image = cv2.GaussianBlur(infected_image, blur_filter,0)

                        #blur_filter = (15, 15)
                        #gan_image_values['mask'] = gan_image_values['mask'].astype(np.uint8)
                        #gan_image_values['mask'] = cv2.GaussianBlur(gan_image_values['mask'], blur_filter,0)
                        #gan_image_values['mask'] = np.where(gan_image_values['mask'] > 150, 255, 0)

                        #lung = np.zeros((gan_image_values['height'], gan_image_values['width'], 3), np.uint8)
                        #lung[np.where(gan_image_values['mask'] == 255)] = infected_image[np.where(gan_image_values['mask'] == 255)]
                        
                        #blur_filter = (3, 3)
                        #lung = cv2.GaussianBlur(lung, blur_filter,0)
                        #infected_image[np.where(gan_image_values['mask'] == 255)] = lung[np.where(gan_image_values['mask'] == 255)]


                        #cv2.imwrite('infected.jpg', infected_image)

                        infected_mask = np.zeros((original_image_values['height'], original_image_values['width']), np.uint8)
                        infected_mask = cv2.addWeighted(infected_mask,1,original_image_values['left_mask'],1,0)
                        infected_mask = cv2.addWeighted(infected_mask,1,original_image_values['right_mask'],1,0)
                        #cv2.imwrite('mask.png', new_infected_mask)

                        final_mask = np.zeros((original_image_values['height'], original_image_values['width'], 3), np.uint8)
                        #final_mask[:,:,0] = infected_mask
                        #final_mask[:,:,1] = infected_mask
                        final_mask[:,:,2] = infected_mask
                        masked_image = cv2.addWeighted(infected_image, 1, final_mask, 0.4, 0.0)
                        #cv2.imwrite('masked.jpg', masked_image)

                        image_name = gan_image_values['image_path'].split('/')[-1]
                        image_path = 'augmented_images/' + gan + '/images/' + image_name

                        mask_name = gan_image_values['mask_path'].split('/')[-1]
                        mask_path = 'augmented_images/' + gan + '/masks/' + mask_name

                        masked_path = 'augmented_images/' + gan + '/masked/' + image_name

                        print(image_name)
                        #print(image_path)
                        #print(mask_path)
                        #print(masked_path)

                        cv2.imwrite(image_path, infected_image)
                        cv2.imwrite(mask_path, infected_mask)
                        cv2.imwrite(masked_path, masked_image)